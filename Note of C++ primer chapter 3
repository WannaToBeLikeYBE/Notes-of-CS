第三章 字符串、向量和数组
    string和vector是标准库基于对于数组的抽象提供的类型，前者支持可变长的字符串，后者则表示可变长的集合
3.1命名空间的using声明
    using namespace::name;

3.2标准库类型string
    1.定义和初始化
      std::string i;默认为空串
      std::string i="...";拷贝初始化
      std::string i("...");直接初始化
      std::string i(n,'char');把i初始化为n个char字符组成的串
    2.string对象上的操作
      （1）读写：一般通过cin（以空格为分隔）或getline(cin,line)（以换行符为分隔，结果不包含分隔符）读入。
      （2）string的empty和size操作：empty和size是string的成员函数。string_name.empty()根据对象是否为空返回对应布尔值，
              string_name.size()返回string对象的的长度。注意：返回类型为string::size_type，是一个unsigned类型数，要避免混用有无符号数。
      （3）字面值和string对象相象：处于某些历史原因以及为了与C兼容，字符串字面值并不是标准库类型string的对象。
              因此当要返回string时需要确保每个加法运算符两侧对象至少有一个是string对象。
    3.处理string对象中的字符
      （1）cctype头文件中的函数：对字符的判断，详见p82。
      （2）处理字符：（1）使用基于范围的for语句
                        for(declaration:expression)  //for(变量:序列)
                            statement
                        
                        eg. std::string str("...")
                            for(auto c:str)
                        范围for循环将变量c与序列str联系起来，每次迭代str的下一个字符被拷贝到c。
                        如果想要改变string对象中字符的值，需要把循环变量定义成引用类型。
                        eg.for(auto &c:str)
                              c=toupper(c);//大写字符
                     （2）使用下标运算符[]
                         *当使用下表运算符时需要注意范围。
                         推荐使用string::size_type，可以确保下标不会小于0，注意检查下标的合法性。
                         
3.3标准库类型vector
        标准库类型vector表示对象的集合，其中所有对象的类型都相同，它也被称为容器。
        vector是一个类模板，编译器根据模板创建类或函数的过程称为实例化。当使用模板时需要指出编译器应把类或函数实例化成哪种类型，同理
            由vector生成的类型必须包含vector中元素的类型，例如vector<int>
        1.定义和初始化vector对象
            vector<T> v1;  //v1是一个空vector，潜在类型为T，执行默认初始化。
            vector<T> v2(v1);  //v2中包含v1所有元素的副本，等价于vector(T) v2=v1;
            vector<T> v3(n,val);  //v3包含了n个重复元素val。
            vector(T) v4(n);  //v4包含了n个执行了值初始化的对象。
            vector(T) v5{a,b,c,...}  //列表初始化。
        2.向vector对象中添加元素
        值初始化一般应用较少，通常情况下是向空vector对象中添加元素。（vector对象能高效地增长）
        vector成员函数push_back负责将一个值当成vector对象的尾元素push到vector对象的尾端
        eg.std::vector<std::string> words;
            words.push_back("大家好，介绍一下我的女朋友，香香。");
        注意：范围for循环提不应改变其所遍历序列的大小
        3.其他vector操作
            大多和string的相关操作类似，包括下标操作。
            
       vector实现了一个可变的相对自由的特殊数组。当其初始状态是不定时，不能用下标形式对其进行操作与访问。
                    
3.4迭代器介绍
        迭代器实现了对于容器元素或string对象中字符的间接访问。所有标准库容器都可以使用迭代器，但是其中只有少数同时支持下标运算符。
        一般来说，我们不清楚（不在意）迭代器准确的类型是什么。
        （1）使用迭代器
           eg.std::vector<int> a(12);
           auto beg = a.begin(),end = a.end();
         有迭代器的类型同时拥有返回迭代器的成员，例如begin和end成员：
         begin成员负责返回指向第一个元素的迭代器，end成员负责返回尾元素的下一位置。end成员返回的迭代器又被称为尾迭代器。
         对于常量类型，存在cbegin和cend得到const_iterator的返回值，用法同上。
         （2）迭代器类型
            每个容器类定义了一个名为iterator的类型，该类型支持迭代器概念所规定的一套操作。
            const_iterator和常量指针差不多，能读取但不能修改它所指的元素值。
         （3）常用运算符和运算
           （a）*iter  //解引用
           （b）iter->men  //解引用iter并获取该元素名为men的成员，等于*(iter).man
           （c）iter+n  //迭代器加/减整数仍得到迭代器，新迭代器较之前迭代器移动n个单位
           （d）iter1-iter2  //两个迭代器相减的结果是他们之间的距离，其类型是difference_type的带符号整形数
           （e）逻辑运算符  //可以根据迭代器的位置比较其大小
         (4) *任何一种可能改变vector对象容量的操作，比如push_back，都会使该vector对象的迭代器失效。
               但凡是使用了迭代器的循环体，都不要向迭代器所属的容器添加元素。
        
