第六章 函数
6.1函数基础
  (1)函数包括：返回类型，函数名字，由0个或多个形参组成的列表，函数体。
  (2)函数的返回类型不能是数组或函数类型，但可以是指向数组或函数的指针。
  (3)形参是一种自动对象，只存在于块执行期间。某些时候，有必要令局部变量的生命周期贯穿于函数调用及之后的时间，可以将局部变量定义成static类型得到：局部静态对象
eg.size_t count()
{
  static size_t ctr=0;
  return size_t++;
}
  
6.2参数传递
  (1)当形参是引用类型时，实参被引用传递，称为函数被传引用调用；当实参拷贝给形参，实参被值传递，称为函数被传值调用。（如果函数无需改变引用形参的值，最好将其声明为常量引用）
  why：1.不希望实参被修改  2.使函数能作用于常量对象eg.const string
  注：如果要引入较长的实参，如string，可以将形参设置为引用类型，避免拷贝。
  注意顶层const和底层const的区别。
  (2)数组形参  数组特性：不允许拷贝&&使用数组时通常将其转换为指针
              管理数组长度：（1）数组本身包含结束标记 （2）使用标准库规范 begin(array) end(array) （3）显示传递一个表示数组大小的形参
  (3)数组引用形参  eg. void printf(int (&arr)[10])  注意：&arr两段的括号必不可少  &arr[10]是引用的数组，tan90°   同时，维度也是类型的一部分
  
  (4)main:处理命令行选项 P196  看不懂
  (5)含有可变形参的函数：有时我们无法提前预知应该向函数传递几个参数
    I::initializer_list形参：如果函数的实参数量未知但是全部实参的类型都相同，可以使用标准库类型initializer_list，用于表示某种特定类型的值的数组。
                          和vector不一样的是，initializer_list对象中的元素永远是常量值。如果想像initializer_list形参中传递一个值的序列，必须把序列放在一对花括号内。
    eg.void error_msg(initializer_list<string> il){
          for(auto beg=il.begin();beg!=il.end();beg++)
              cout<<*beg<<' ';
    }//expected和actual是string对象
       if(expected != actual)
          error_msg({"functionX",expected,actual});
       else error_msg({"fuctionX","okay"});
   II::省略符形参：省略符形参是为了便于C++程序访问某些特殊的C代码而设置的，大多数类类型的对象在传递给省略符形参时都无法正常拷贝
    eg.void foo(parm_list,...);void foo(...);
    
 6.3返回类型和return语句
  (1)有返回类型和无返回类型函数；
  (2)列表初始化返回值：函数可以返回花括号包围的值的列表，列表用来对表示函数返回的临时量进行初始化。
    eg.vector<string> process(){
            if(A)  return {};//返回一个空vector
            if(B)  return {"functionX","okay"};//返回列表初始化的vector对象
    }
  (3)递归：一个不断调用自身的过程
    eg.int factorial(int val){
          if(val>1)
            reutrn factorial(val-1)*val;
          return 1;
    }
  (4)返回数组指针
    1.使用类型别名eg.using arrt = int [10];||typedef int arrt[10];
                    arrt *fuc(int i){}
    2.直接声明：Type(*fuction(parameter_list)) [dimension] 注意括号
                    eg.int (*func(int i))[10]{}
    3.使用尾置返回类型:尾置返回类型跟在形参列表后并以一个->符号开头。
                    eg.auto fuc(int i) ->int(*) [10];
  
  
  6.4函数重载：如果同一作用域内的几个函数名字相同但形参列表不同，我们称之为重载函数。
    当调用这些函数时，编译器会根据传递的实参类型推断想要的是哪个函数。
    (1)重载和const形参：一个拥有顶层const的形参无法和另一个没有顶层const的形参区分开：
    eg.int lookup(int){}  -----   int lookup(const int)  //重复声明
                       另一方面，如果形参是某种类型的指针或引用，则通过区分其指向的对象是常量对象还是非常量对象实现函数重载，此时const是底层的：
    eg.int lookup(int *){} ----  int lookup(const int *) //+1重载
    (2)函数匹配||重载确定  （较简单省略）
    (3)重载与作用域:如果我们在内层作用域中声明名字，他将隐藏外层作用域中声明的同名实体。//在Cpp中，名字查找发生在类型检查之前。
    
    
  6.5特殊用途的语言特性
    (1)默认实参：声明形参时可将形参初始化实现默认实参。
        eg.int fuck(int a=1;int b=2;int c=3){}
        注：！！一旦某个形参被赋予了默认值，它后面的所有形参必须有默认值。
        eg.int a = fuck(,,1) //error:只能省略尾部的实参
    (2)内联函数：对于规模较小，流程直接，频繁调用的函数，可以在函数返回类型前面加上关键词inline，声明为内联函数，以避免函数调用的开销。
        eg.inline const string &compare(const string &a,const string &b)
        {return a.size()<b.size() ? a:b;}
    (3)constexpr函数：指能用于常量表达式的函数：函数返回值以及所有形参的类型都是字面值类型：必须只有一条return语句。
    (4)//调试帮助：assert预处理宏和NDEBUG预处理变量 P215 略
    
  6.6函数匹配 （略）
  
  6.7函数指针
  eg.  bool fuck(const string &,const string &){}  =   bool (*pf)(const string &,const string &)
  函数指针直接调用函数，无须提前解引用。
                    
              
  
  
       
       
       
       
       
       
       
       
       
       
